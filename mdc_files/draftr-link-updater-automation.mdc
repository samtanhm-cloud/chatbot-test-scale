---
name: Draftr Link Updater (Permanent Link Modification)
description: Authenticate, navigate to Draftr assets, update anchor links permanently
version: 1.1.0
author: AI Assistant
alwaysApply: false
changelog: |
  v1.1.0 - TESTED & VERIFIED WORKFLOW
    ‚Ä¢ ‚úÖ Successfully tested on real Draftr asset (ID: 3934202)
    ‚Ä¢ üîë Documented critical "Press Enter" step for field commit
    ‚Ä¢ üìã Added detailed save workflow with visual diagram
    ‚Ä¢ ‚ö†Ô∏è Documented what does NOT work (common pitfalls)
    ‚Ä¢ ‚úÖ Added verification steps with reload confirmation
    ‚Ä¢ üìù Added real code examples from successful test run
    
  v1.0.0 - INITIAL RELEASE
    ‚Ä¢ Automated login and authentication to Draftr
    ‚Ä¢ Navigate to specific asset by ID
    ‚Ä¢ Find and update anchor links by pattern or specific criteria
    ‚Ä¢ Save changes permanently to Draftr system
    ‚Ä¢ Batch processing support for multiple assets
    ‚Ä¢ Verification of successful updates
---

# Draftr Link Updater Automation (v1.1.0)

## üéØ What This Does

**Permanently updates links in Draftr email assets:**
- Authenticates to Draftr system
- Navigates to specific asset(s) by ID
- Finds links matching your criteria
- Updates link URLs permanently
- Saves changes to Draftr backend
- Verifies successful updates

## üí° Key Capabilities

‚úÖ **Update by Pattern**: Change all links from old domain to new domain
‚úÖ **Update by Text**: Find links by anchor text and update URLs
‚úÖ **Batch Processing**: Update multiple assets in sequence
‚úÖ **Permanent Changes**: Changes saved to Draftr backend (not temporary browser modifications)
‚úÖ **Verification**: Confirms updates were successfully saved

---

## üìã Required User Inputs

### INPUT 1: Authentication (One-Time per Session)
```
REQUIRED: Draftr login credentials or SSO authentication
- Draftr URL: https://webpub.autodesk.com/draftr/
- Will prompt for login if not already authenticated
```

### INPUT 2: Asset Information
```
REQUIRED: Draftr asset ID(s) to update
Format: Single ID or comma-separated list
Example: 3934202
Example: 3934202,3927289,3935502
```

### INPUT 3: Link Update Criteria
Choose ONE of the following options:

**Option A: Pattern-Based Update (Domain Change)**
```
Find: old-domain.com
Replace with: new-domain.com
Scope: All links containing the pattern
```

**Option B: Specific Link Update**
```
Old URL: https://example.com/old-page
New URL: https://example.com/new-page
Scope: Only exact matches
```

**Option C: Anchor Text-Based Update**
```
Anchor Text: "Click here to learn more"
New URL: https://example.com/updated-page
Scope: Links with matching anchor text
```

**Option D: Bulk Update from CSV**
```
CSV Format: Old URL,New URL
Provides: List of multiple URL replacements
```

---

## üîÑ Automation Workflow

### PHASE 1: Authentication & Setup

**Step 1.1: Navigate to Draftr**
- Navigate to: `https://webpub.autodesk.com/draftr/`
- Wait for page load

**Step 1.2: Authentication Check**
- Check if already authenticated (look for user profile/dashboard)
- If not authenticated:
  - Wait for SSO/login screen
  - Allow user to authenticate (Autodesk SSO)
  - Wait for successful login confirmation
  - Verify access to Draftr dashboard

**Step 1.3: Get User Inputs**
- Prompt for Asset ID(s)
- Prompt for update criteria (Option A, B, C, or D)
- Validate inputs
- Create TODO list for processing

---

### PHASE 2: Asset Navigation & Link Discovery

**For Each Asset ID:**

**Step 2.1: Navigate to Asset**
- URL: `https://webpub.autodesk.com/draftr/asset/{ASSET_ID}`
- Wait for asset to load completely
- Verify asset exists (handle 404/403 errors)

**Step 2.2: Enter Edit Mode**
- Look for "Edit" button or edit mode toggle
- Click to enter edit mode
- Wait for editor interface to load
- Verify edit mode is active

**Step 2.3: Extract Current Links**
- Use `browser_evaluate` to extract all anchor tags
- Capture: href, anchor text, position in document
- Store link inventory for comparison

```javascript
function extractAllLinks() {
    const links = [];
    const anchors = document.querySelectorAll('a[href]');
    
    anchors.forEach((anchor, index) => {
        links.push({
            index: index,
            href: anchor.href,
            text: anchor.textContent.trim(),
            originalHtml: anchor.outerHTML
        });
    });
    
    return {
        totalLinks: links.length,
        links: links,
        assetId: window.location.pathname.split('/').pop()
    };
}
```

---

### PHASE 3: Link Identification & Update

**Step 3.1: Identify Target Links**

Based on user's update criteria, filter links:

**Option A - Pattern-Based:**
```javascript
function identifyPatternLinks(allLinks, findPattern) {
    return allLinks.filter(link => 
        link.href.includes(findPattern)
    );
}
```

**Option B - Specific URL:**
```javascript
function identifySpecificLink(allLinks, oldUrl) {
    return allLinks.filter(link => 
        link.href === oldUrl
    );
}
```

**Option C - Anchor Text:**
```javascript
function identifyByAnchorText(allLinks, anchorText) {
    return allLinks.filter(link => 
        link.text.toLowerCase().includes(anchorText.toLowerCase())
    );
}
```

**Step 3.2: Preview Changes**
- Display links that will be updated
- Show: Current URL ‚Üí New URL
- Count: X links will be updated

**Step 3.3: Execute Updates**

**‚ö†Ô∏è CRITICAL: Use Draftr's Native Editing Interface**

This automation must use Draftr's built-in link editing functionality, NOT direct DOM manipulation. Here's why:

‚ùå **Wrong Approach** (Temporary):
```javascript
// This only changes browser display - NOT saved to backend
document.querySelector('a').href = 'new-url.com';
```

‚úÖ **Correct Approach** (Permanent):

**Method 1: Visual Editor Interface**
1. Click on the link element in Draftr's visual editor
2. Look for "Edit Link" or link properties panel
3. Update href field in the properties panel
4. Click "Apply" or "Update"

**Method 2: HTML/Source Editor**
1. Switch to HTML/Source view in Draftr
2. Find and replace link URLs in source code
3. Use Draftr's find/replace feature if available
4. Save changes

**Method 3: Draftr API (if available)**
```javascript
// If Draftr exposes API for content updates
await updateAssetLink(assetId, oldHref, newHref);
```

**Step 3.4: Update Execution Strategy**

**üîë CRITICAL WORKFLOW (Discovered from Testing):**

```javascript
// For each target link, use Draftr's native editing
function updateLinkViaEditor(linkElement, newUrl) {
    // Step 1: Click the panel/section containing the link
    // Opens the panel editor with input fields
    
    // Step 2: Click on the link input field
    // Locates the specific textbox for the URL
    
    // Step 3: Select all existing text (Cmd+A or Ctrl+A)
    // Clears the field for new input
    
    // Step 4: Fill in the new URL
    // Use browser_type tool to enter new URL
    
    // Step 5: ‚ö†Ô∏è CRITICAL - Press Enter key
    // This triggers Draftr's auto-save for the field
    // WITHOUT this step, changes will NOT persist!
    // Changes are committed to the panel configuration
    
    // Step 6: Repeat for all target links in the panel
    
    // Step 7: Click main "Save" button (top of page)
    // Saves the entire asset with all panel changes
    
    // Step 8: Verify change was applied
}
```

**Why Step 5 (Press Enter) is Critical:**
- ‚ùå Just filling the textbox + Tab key = Changes revert
- ‚ùå Just filling the textbox + clicking away = Changes revert  
- ‚úÖ Filling the textbox + **Press Enter** = Changes committed to panel
- ‚úÖ Then clicking main Save = Changes persisted to database

**Real Example from Testing:**
```javascript
// This sequence works:
await browser_click({ element: "Primary CTA Link", ref: "e123" });
await browser_press_key({ key: "Meta+a" }); // Select all
await browser_type({ text: "https://www.autodesk.com/it/support" });
await browser_press_key({ key: "Enter" }); // CRITICAL - Commits the change
// Observe: Auto-save triggered, timestamp updates
await browser_click({ element: "Main Save button", ref: "e456" });
// Observe: "Asset Saved" confirmation appears
```

---

### PHASE 4: Save & Verification

**Step 4.1: Ensure Panel Changes Are Committed**

**‚ö†Ô∏è CRITICAL: This step must happen BEFORE clicking main Save button**

After updating each link in the panel editor:
```javascript
// For each link updated in a panel:
// 1. Fill the textbox with new URL
await browser_type({ element: "Link input", ref: "...", text: newUrl });

// 2. Press Enter to commit the change to panel configuration
await browser_press_key({ key: "Enter" });

// 3. Wait briefly for auto-save indicator
await browser_wait_for({ time: 1 });

// 4. Look for "Saved at HH:MM:SS" timestamp update
// This confirms the panel change was auto-saved
```

**Visual Indicators of Panel Auto-Save:**
- ‚úÖ Timestamp updates (e.g., "Saved at 13:29:54")
- ‚úÖ Link appears in preview with new URL
- ‚úÖ No revert when clicking away from field

**Step 4.2: Save Asset to Draftr Backend**

**Now click the main Save button to persist all changes:**
- Location: Top toolbar, usually near "Preview" and "Export" buttons
- Label: "Save" (may have disk/save icon)
- Purpose: Saves ALL panel changes to Draftr database

**Click main save button:**
```javascript
// Click the main Save button (top of page, not panel save)
await browser_click({ element: "Save button", ref: "e9" });

// Wait for save confirmation
await browser_wait_for({ time: 2 });
```

**Expected Confirmation:**
- Success toast/notification: "Asset Saved" or "Asset Updated"
- Timestamp update in header
- No "unsaved changes" warning

**Step 4.3: Verify Changes Were Persisted**

**Method 1: Visual Confirmation**
- Look for success notification/toast message (e.g., "Asset Saved")
- Check for "Last saved" timestamp update in header
- Verify no unsaved changes indicator

**Method 2: Reload & Re-check (RECOMMENDED)**
```javascript
// CRITICAL: Reload the asset page to verify changes persisted to database
await browser_navigate(`https://webpub.autodesk.com/draftr/asset/${assetId}`);
await browser_wait_for({ time: 3 });

// Re-extract links from rendered preview
const updatedLinks = await browser_evaluate(extractAllLinks);

// Verify: are the new URLs present in the rendered content?
function verifyLinkUpdates(oldLinks, newLinks, expectedChanges) {
    for (const change of expectedChanges) {
        const updatedLink = newLinks.find(link => 
            link.text === change.anchorText && 
            link.href === change.newUrl
        );
        
        if (!updatedLink) {
            return { 
                success: false, 
                error: `Link "${change.anchorText}" not updated to ${change.newUrl}` 
            };
        }
    }
    return { success: true };
}

const verificationResult = verifyLinkUpdates(originalLinks, updatedLinks, expectedChanges);
```

**Verification Checklist:**
- ‚úÖ Page reloaded successfully
- ‚úÖ New URLs visible in rendered preview
- ‚úÖ Anchor text preserved (unchanged)
- ‚úÖ Links are clickable and functional
- ‚úÖ No unexpected changes to other links

**Step 4.4: Generate Update Report**
```
Asset ID: 3934202
Links Updated: 5
Successful: 5
Failed: 0

Updated Links:
1. "Learn More" ‚Üí https://old.com/page ‚Üí https://new.com/page ‚úÖ
2. "Support" ‚Üí https://old.com/support ‚Üí https://new.com/support ‚úÖ
3. "Contact Us" ‚Üí https://old.com/contact ‚Üí https://new.com/contact ‚úÖ
4. "Documentation" ‚Üí https://old.com/docs ‚Üí https://new.com/docs ‚úÖ
5. "Download" ‚Üí https://old.com/download ‚Üí https://new.com/download ‚úÖ
```

---

### PHASE 5: Batch Processing (Multiple Assets)

**If multiple asset IDs provided:**

**Step 5.1: Create Processing Queue**
```
TODO List:
1. ‚òê Asset 3934202 - Update links
2. ‚òê Asset 3927289 - Update links
3. ‚òê Asset 3935502 - Update links
```

**Step 5.2: Process Each Asset Sequentially**
- For each asset: Run PHASE 2 ‚Üí PHASE 3 ‚Üí PHASE 4
- Mark each as complete after verification
- Continue even if one asset fails
- Log any errors for review

**Step 5.3: Generate Batch Summary**
```csv
Asset ID,Total Links,Updated Links,Status,Notes
3934202,15,5,Success,All pattern matches updated
3927289,8,3,Success,All pattern matches updated
3935502,12,0,Failed,Asset not found (404)
```

---

## üîß Error Handling & Recovery

### Authentication Errors
**Issue:** Session expired or not authenticated
**Recovery:**
- Detect login redirect
- Pause automation
- Wait for user to login
- Resume from current asset

### Asset Not Found (404)
**Issue:** Asset ID doesn't exist
**Recovery:**
- Log error
- Skip to next asset
- Include in final report

### Insufficient Permissions (403)
**Issue:** User doesn't have edit access
**Recovery:**
- Log error with message
- Skip asset
- Recommend checking permissions

### Save Failed
**Issue:** Changes not persisted
**Recovery:**
- Retry save operation (up to 3 times)
- Check for error messages
- Refresh page and retry
- Log as failed if all retries exhausted

### Link Not Found
**Issue:** Pattern/criteria matches no links
**Recovery:**
- Report zero matches
- Ask user to verify criteria
- Continue to next asset

---

## üìä Expected Outputs

### Success Case
```
‚úÖ Automation Complete

Assets Processed: 3/3
Total Links Updated: 13
Success Rate: 100%

Detailed Report:
- Asset 3934202: 5 links updated ‚úÖ
- Asset 3927289: 3 links updated ‚úÖ
- Asset 3935502: 5 links updated ‚úÖ

All changes saved to Draftr backend.
```

### Partial Success Case
```
‚ö†Ô∏è Automation Complete with Warnings

Assets Processed: 3/3
Total Links Updated: 8
Success Rate: 66.7%

Detailed Report:
- Asset 3934202: 5 links updated ‚úÖ
- Asset 3927289: 3 links updated ‚úÖ
- Asset 3935502: 0 links updated ‚ùå (Asset not found)

Action Required: Review failed assets
```

---

## üéØ TODO List Template

**AI Assistant: Create this TODO list at start of automation**

```
TODO items (Draftr Link Updater v1.0.0):
1. ‚òê PHASE 1: Authentication & input collection
2. ‚òê PHASE 2: Navigate to first asset & enter edit mode
3. ‚òê PHASE 3: Identify & update target links
4. ‚òê PHASE 4: Save changes & verify
5. ‚òê PHASE 5: Process remaining assets (if batch mode)
6. ‚òê PHASE 6: Generate final report
```

---

## üö® Critical Implementation Notes

### 0. THE CORRECT SAVE WORKFLOW (MANDATORY)

**üî¥ This is the ONLY workflow that persists changes permanently:**

```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ STEP 1: Click panel to open editor             ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ STEP 2: Click link input textbox               ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ STEP 3: Select all text (Cmd+A / Ctrl+A)       ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ STEP 4: Type new URL                           ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ STEP 5: ‚ö†Ô∏è  PRESS ENTER KEY  ‚ö†Ô∏è                ‚îÇ
‚îÇ         (Commits change to panel config)        ‚îÇ
‚îÇ         (Auto-save timestamp updates)           ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ STEP 6: Repeat steps 2-5 for each link         ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ STEP 7: Click main "Save" button (top toolbar) ‚îÇ
‚îÇ         (Persists ALL panel changes to DB)      ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ STEP 8: Verify "Asset Saved" confirmation      ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ STEP 9: Reload page to confirm persistence     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

**‚ùå THESE APPROACHES DO NOT WORK:**
```javascript
// ‚ùå Fill + Tab = Changes revert after clicking away
await browser_type({ text: newUrl });
await browser_press_key({ key: "Tab" });  // Changes LOST

// ‚ùå Fill + Click away = Changes revert
await browser_type({ text: newUrl });
await browser_click({ element: "Different element" });  // Changes LOST

// ‚ùå Fill + Main Save immediately = Changes not committed
await browser_type({ text: newUrl });
await browser_click({ element: "Main Save" });  // Changes LOST

// ‚ùå Direct DOM manipulation = Not saved to backend
await browser_evaluate('document.querySelector("a").href = "newurl"');  // Temporary only
```

**‚úÖ THIS APPROACH WORKS:**
```javascript
// ‚úÖ Fill + Enter + Main Save = Changes persist
await browser_type({ text: newUrl });
await browser_press_key({ key: "Enter" });  // ‚Üê CRITICAL STEP
// Observe: Timestamp updates, e.g., "Saved at 13:29:54"
await browser_click({ element: "Main Save" });
// Observe: "Asset Saved" notification
// Reload: Changes still present ‚úÖ
```

**Why Press Enter is Required:**
- Draftr uses auto-save for individual fields
- Enter key triggers field validation and commit
- Without Enter, changes remain uncommitted in browser memory
- Main Save button only persists COMMITTED panel changes
- Uncommitted changes are discarded on navigation/save

### 1. Draftr UI Detection Strategy

**The automation must adapt to Draftr's interface. Use multiple detection strategies:**

**For Edit Mode:**
```javascript
// Try multiple selectors
const editButton = 
    document.querySelector('button[aria-label="Edit"]') ||
    document.querySelector('button:contains("Edit")') ||
    document.querySelector('a[href*="/edit"]');
```

**For Save Button:**
```javascript
// Try multiple selectors
const saveButton = 
    document.querySelector('button[aria-label="Save"]') ||
    document.querySelector('button[type="submit"]') ||
    document.querySelector('button:contains("Save")');
```

### 2. Wait for Dynamic Content

Draftr likely uses React/Vue - content loads dynamically:
```javascript
// Wait for editor to fully load
await browser_wait_for({ time: 3 });

// Or wait for specific element
await browser_snapshot(); // Check if editor loaded
```

### 3. Change Verification is Critical

**Always verify changes before moving to next asset:**
- Don't trust that clicking "Save" worked
- Reload page and re-extract links
- Compare old vs new URLs
- Only mark as success if verification passes

### 4. Preserve Anchor Text

**When updating links, preserve the anchor text:**
```javascript
// Extract before update
const originalText = link.textContent;

// After URL update, verify text unchanged
if (link.textContent !== originalText) {
    console.error('Anchor text changed unexpectedly!');
}
```

---

## üîç Discovery Phase (First Run)

**Since Draftr's exact UI is unknown, first run should be exploratory:**

**Step 1: Manual Walkthrough with AI**
1. Navigate to asset URL
2. Take snapshot of the page
3. Identify: Where is edit button? What is the UI structure?
4. Click edit button
5. Take snapshot of edit mode
6. Identify: How are links edited? Properties panel? Direct editing?
7. Click on a link
8. Take snapshot of link editing interface
9. Document the workflow for future runs

**Step 2: Adapt Automation**
- Based on discovery, update selectors in automation
- Test on single asset first
- Verify changes persist after save
- Then proceed with batch processing

---

## üí° Usage Examples

### Example 1: Domain Migration
```
Scenario: Migrate all links from help.autodesk.com to support.autodesk.com

Input:
- Asset IDs: 3934202,3927289,3935502
- Update Type: Pattern-Based
- Find: help.autodesk.com
- Replace: support.autodesk.com

Result: All links containing old domain updated to new domain
```

### Example 2: Fix Broken Link
```
Scenario: Update specific broken link across multiple assets

Input:
- Asset IDs: 3934202,3927289
- Update Type: Specific URL
- Old: https://example.com/old-page
- New: https://example.com/new-page

Result: Exact URL match replaced in all assets
```

### Example 3: Update CTA Links
```
Scenario: Update all "Learn More" CTAs to new landing page

Input:
- Asset IDs: 3934202
- Update Type: Anchor Text
- Text: "Learn More"
- New URL: https://example.com/new-landing-page

Result: All "Learn More" links updated to new URL
```

---

## ‚ö†Ô∏è Important Limitations

### What This Automation CAN Do:
‚úÖ Update link URLs (href attributes)
‚úÖ Find links by pattern, URL, or anchor text
‚úÖ Save changes to Draftr backend
‚úÖ Process multiple assets in batch
‚úÖ Verify changes were saved

### What This Automation CANNOT Do:
‚ùå Update links in images (image maps)
‚ùå Update links in embedded CSS/JS
‚ùå Modify link styling or appearance (only URL)
‚ùå Create new links (only updates existing ones)
‚ùå Update links in archived/locked assets (permission-dependent)

---

## üöÄ Ready to Execute

**To start automation, provide:**
1. Asset ID(s) to update
2. Link update criteria (pattern/specific/anchor text)
3. Authentication (if not already logged in)

The automation will handle everything else automatically.

---

## üìù Post-Automation Recommendations

### After Successful Updates:
1. **Test Updated Assets**: Preview emails to ensure links work
2. **Verify Link Tracking**: Ensure tracking parameters preserved (if applicable)
3. **Check Localization**: If updating localized assets, verify language-specific URLs
4. **Update Documentation**: Record what was changed and when
5. **Notify Stakeholders**: Inform team of link updates

### If Errors Occurred:
1. **Review Error Log**: Check which assets/links failed
2. **Manual Verification**: Manually check failed assets
3. **Retry with Adjusted Criteria**: Refine search patterns if needed
4. **Check Permissions**: Ensure you have edit access to all assets
5. **Contact Support**: If persistent issues, may be Draftr system problem

---

## üéâ Testing Results

**Test Asset**: 3934202  
**Test Date**: 2025-10-28  
**Links Updated**: 2  
**Result**: ‚úÖ SUCCESS - Changes persisted after page reload  

**Updated Links:**
1. "Visita il Success Center" ‚Üí `https://www.autodesk.com/it/support` ‚úÖ
2. "Scopri il piano Business" ‚Üí `https://www.autodesk.com/it/products` ‚úÖ

**Key Discovery**: Pressing Enter after each field update is mandatory for changes to persist.

---

**Version**: 1.1.0  
**Last Updated**: 2025-10-28  
**Status**: ‚úÖ Tested and verified with successful updates
