# Draftr Link Updater (JavaScript-Based)

**Updates links in Draftr using JavaScript - no UI clicking required!**

## Variables Required:
- `{{asset_id}}` - Draftr asset ID
- `{{new_url}}` - New URL to update link to
- `{{link_text}}` - (Optional) Text of link to find
- `{{old_url}}` - (Optional) Old URL pattern to replace
- `{{operation}}` - Type of operation (change_specific, replace_all, replace_domain)

## Keywords
draftr, link, update, javascript, automation, direct

---

## PHASE 1: Navigate & Load

### Step 1.1: Navigate to Draftr asset
```mcp
{
  "tool": "playwright_navigate",
  "params": {
    "url": "https://webpub.autodesk.com/draftr/asset/{{asset_id}}"
  }
}
```

### Step 1.2: Wait for page load
```mcp
{
  "tool": "playwright_evaluate",
  "params": {
    "script": "() => new Promise(resolve => setTimeout(resolve, 5000))"
  }
}
```

### Step 1.3: Take initial screenshot
```mcp
{
  "tool": "playwright_screenshot",
  "params": {
    "name": "draftr-asset-{{asset_id}}-initial"
  }
}
```

---

## PHASE 2: Extract Current Links

### Step 2.1: Get all links with details
```mcp
{
  "tool": "playwright_evaluate",
  "params": {
    "script": "() => { const links = []; document.querySelectorAll('a[href]').forEach((a, i) => { links.push({ index: i, href: a.href, text: a.textContent.trim(), outerHTML: a.outerHTML.substring(0, 100) }); }); return { totalLinks: links.length, links: links, assetId: '{{asset_id}}', timestamp: new Date().toISOString() }; }"
  }
}
```

---

## PHASE 3: Update Links with JavaScript

### Step 3.1: Update link based on operation type
```mcp
{
  "tool": "playwright_evaluate",
  "params": {
    "script": "() => { const operation = '{{operation}}'; const linkText = '{{link_text}}'; const newUrl = '{{new_url}}'; const oldUrl = '{{old_url}}'; const oldDomain = '{{old_domain}}'; const newDomain = '{{new_domain}}'; let updated = 0; const links = document.querySelectorAll('a[href]'); links.forEach(link => { let shouldUpdate = false; if (operation === 'change_specific' && linkText && link.textContent.trim().includes(linkText)) { shouldUpdate = true; link.href = newUrl.startsWith('http') ? newUrl : 'https://' + newUrl; } else if (operation === 'replace_all' && oldUrl && link.href.includes(oldUrl)) { shouldUpdate = true; link.href = link.href.replace(oldUrl, newUrl); } else if (operation === 'replace_domain' && oldDomain && link.href.includes(oldDomain)) { shouldUpdate = true; link.href = link.href.replace(new RegExp(oldDomain.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'g'), newDomain); } if (shouldUpdate) { updated++; link.style.border = '2px solid red'; link.setAttribute('data-updated', 'true'); } }); return { operation: operation, linksUpdated: updated, newUrl: newUrl, oldUrl: oldUrl, timestamp: new Date().toISOString(), note: 'Links modified in DOM - need to save in Draftr' }; }"
  }
}
```

### Step 3.2: Wait for visual update
```mcp
{
  "tool": "playwright_evaluate",
  "params": {
    "script": "() => new Promise(resolve => setTimeout(resolve, 2000))"
  }
}
```

### Step 3.3: Screenshot showing updated links (red border)
```mcp
{
  "tool": "playwright_screenshot",
  "params": {
    "name": "draftr-asset-{{asset_id}}-links-highlighted"
  }
}
```

---

## PHASE 4: Verification

### Step 4.1: Get updated link list
```mcp
{
  "tool": "playwright_evaluate",
  "params": {
    "script": "() => { const updatedLinks = []; document.querySelectorAll('a[data-updated=\"true\"]').forEach((a, i) => { updatedLinks.push({ index: i, href: a.href, text: a.textContent.trim() }); }); return { totalUpdated: updatedLinks.length, updatedLinks: updatedLinks, verification: 'Links modified in DOM', nextStep: 'Manual save required in Draftr UI' }; }"
  }
}
```

### Step 4.2: Get visible text to show changes
```mcp
{
  "tool": "playwright_get_visible_text",
  "params": {}
}
```

### Step 4.3: Screenshot before save
```mcp
{
  "tool": "playwright_screenshot",
  "params": {
    "name": "draftr-asset-{{asset_id}}-before-save"
  }
}
```

---

## PHASE 5: Save Changes to Draftr

### Step 5.1: Click Save menu item
```mcp
{
  "tool": "playwright_click",
  "params": {
    "selector": ".draftr__menu-item:has-text('Save')"
  }
}
```

### Step 5.2: Wait for save operation to complete
```mcp
{
  "tool": "playwright_evaluate",
  "params": {
    "script": "() => new Promise(resolve => setTimeout(resolve, 3000))"
  }
}
```

### Step 5.3: Verify save was successful
```mcp
{
  "tool": "playwright_evaluate",
  "params": {
    "script": "() => { const saveButton = document.querySelector('.draftr__menu-item'); const notification = document.querySelector('[class*=\"notification\"], [class*=\"toast\"], [class*=\"snackbar\"], [class*=\"alert\"]'); return { saveButtonExists: !!saveButton, notificationVisible: !!notification, notificationText: notification ? notification.textContent.trim() : 'No notification found', pageTitle: document.title, timestamp: new Date().toISOString(), status: 'Save completed' }; }"
  }
}
```

### Step 5.4: Final screenshot showing saved state
```mcp
{
  "tool": "playwright_screenshot",
  "params": {
    "name": "draftr-asset-{{asset_id}}-saved-final"
  }
}
```

### Step 5.5: Get final confirmation
```mcp
{
  "tool": "playwright_get_visible_text",
  "params": {}
}
```

---

## ‚ö†Ô∏è Important Notes

### What This Does:
1. ‚úÖ Navigates to your Draftr asset
2. ‚úÖ Extracts all current links
3. ‚úÖ Modifies links in the DOM using JavaScript
4. ‚úÖ Highlights changed links with red border
5. ‚úÖ Takes screenshots showing changes
6. ‚úÖ Returns list of updated links
7. ‚úÖ **Automatically clicks Save button**
8. ‚úÖ Verifies save was successful
9. ‚úÖ Provides final confirmation

### Authentication:
‚úÖ **Uses your existing browser session** - if you're logged into Draftr in your browser, the automation inherits that session

### How It Works:
- When you navigate to `https://webpub.autodesk.com/draftr/`, Playwright uses your browser's stored cookies
- If you have an active Draftr session, the automation continues with your credentials
- **No separate login required** - it piggybacks on your existing authentication

---

## üîê Authentication Requirements

### Option 1: Existing Browser Session (Recommended)
If you're already logged into Draftr in your browser:
- ‚úÖ **Playwright inherits your session cookies**
- ‚úÖ **No additional login needed**
- ‚úÖ **Works automatically**

### Option 2: Headless Mode on Streamlit Cloud
When running on Streamlit Cloud (headless):
- ‚ö†Ô∏è **No existing browser session available**
- ‚ö†Ô∏è **May require manual authentication step**

**Solutions:**
1. Add authentication cookies to environment variables
2. Use Draftr API token if available
3. Add login step at the beginning of automation

---

## üìä Expected Output

```json
{
  "operation": "change_specific",
  "linksUpdated": 1,
  "newUrl": "www.autodesk.com/uk/support",
  "updatedLinks": [
    {
      "index": 0,
      "href": "https://www.autodesk.com/uk/support",
      "text": "Get in touch"
    }
  ]
}
```

---

## üöÄ Advantages of JavaScript Approach

‚úÖ **No UI selectors needed** - Works on any Draftr asset
‚úÖ **Fast** - Direct DOM manipulation
‚úÖ **Reliable** - No waiting for UI elements
‚úÖ **Visual confirmation** - Red borders show changes
‚úÖ **Detailed output** - Returns exactly what changed
‚úÖ **Flexible** - Handles all three operation types
‚úÖ **Auto-save enabled** - Clicks Save button automatically
‚úÖ **Save verification** - Confirms save was successful

‚ö†Ô∏è **Authentication required** - Must be logged into Draftr (or provide credentials)
